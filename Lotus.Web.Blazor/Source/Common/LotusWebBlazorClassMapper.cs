//=====================================================================================================================
// Проект: Модуль Blazor платформы Web
// Раздел: Общая подсистема
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusWebBlazorClassMapper.cs
*		Класс обеспечивающий хранение, управление и доступ к атрибуту класса HTML элемента.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System.Text;
//=====================================================================================================================
namespace Lotus
{
	namespace Web
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup WebBlazorCommon
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс обеспечивающий хранение, управление и доступ к атрибуту класса HTML элемента
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CClassMapper : List<String>
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Разделитель классов
			/// </summary>
			public const Char SEPARATOR = ' ';
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные списка предустановленными данными
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CClassMapper()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные списка указанными данными
			/// </summary>
			/// <param name="capacity">Начальная максимальная емкость списка</param>
			//---------------------------------------------------------------------------------------------------------
			public CClassMapper(Int32 capacity)
				: base(capacity)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные списка указанными данными
			/// </summary>
			/// <param name="items">Список элементов</param>
			//---------------------------------------------------------------------------------------------------------
			public CClassMapper(IList<String> items)
				: base(items)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные списка указанными данными
			/// </summary>
			/// <param name="class_name">Строка с перечислением классов</param>
			//---------------------------------------------------------------------------------------------------------
			public CClassMapper(String class_name)
			{
				SetFromString(class_name);
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return AsString();
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Разбор классов CSS из строки и присвоение их объекту
			/// </summary>
			/// <param name="class_name">Строка с перечислением классов</param>
			//---------------------------------------------------------------------------------------------------------
			public void SetFromString(String class_name)
			{
				String[] classes = class_name.Split(SEPARATOR, StringSplitOptions.RemoveEmptyEntries);
				if (classes.Length > 0)
				{
					this.Clear();
					this.AddRange(classes);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Разбор классов CSS из строки и добавление их объекту
			/// </summary>
			/// <param name="class_name">Строка с перечислением классов</param>
			//---------------------------------------------------------------------------------------------------------
			public void AddFromString(String class_name)
			{
				String[] classes = class_name.Split(SEPARATOR, StringSplitOptions.RemoveEmptyEntries);
				if (classes.Length > 0)
				{
					this.AddRange(classes);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление</returns>
			//---------------------------------------------------------------------------------------------------------
			public String AsString()
			{
				if (Count > 0)
				{
					if (Count == 1)
					{
						return (this[0]);
					}
					else
					{
						StringBuilder builder = new StringBuilder(40);
						for (Int32 i = 0; i < Count; i++)
						{
							builder.Append(this[i]);

							if (i < Count - 1)
							{
								builder.Append(SEPARATOR);
							}
						}

						return (builder.ToString());
					}
				}
				else
				{
					return (String.Empty);
				}
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================