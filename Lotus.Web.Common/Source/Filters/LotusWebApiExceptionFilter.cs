//=====================================================================================================================
// Проект: Общий модуль платформы Web
// Раздел: Подсистема фильтров
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusWebApiExceptionFilter.cs
*		Фильтр для обработки исключений в методах api контроллера.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
//=====================================================================================================================
namespace Lotus
{
    namespace Web
    {
		//-------------------------------------------------------------------------------------------------------------
		/**
         * \defgroup WebCommonFilters Подсистема фильтров
         * \ingroup WebCommon
         * \brief Подсистема фильтров.
         * @{
         */
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Фильтр для обработки исключений в методах api контроллера.
		/// Для использования в проекте нужно зарегистрировать как сервис services.AddSingleton.ApiExceptionFilter
		/// и вешать как [ServiceFilter(typeof(ApiExceptionFilterAttribute))]
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class ApiExceptionFilterAttribute : ExceptionFilterAttribute
        {
            #region ======================================= ДАННЫЕ ====================================================
            private readonly ILogger<ApiExceptionFilterAttribute> _logger;
            #endregion

            #region ======================================= КОНСТРУКТОРЫ ==============================================
            //---------------------------------------------------------------------------------------------------------
            /// <summary>
            /// Конструктор инициализирует объект класса указанными параметрами
            /// </summary>
            /// <param name="logger">Логгер</param>
            //---------------------------------------------------------------------------------------------------------
            public ApiExceptionFilterAttribute(ILogger<ApiExceptionFilterAttribute> logger)
            {
                _logger = logger;
            }
            #endregion

            #region ======================================= ПЕРЕГРУЖЕННЫЕ МЕТОДЫ ======================================
            //---------------------------------------------------------------------------------------------------------
            /// <summary>
            /// Обработка исключения в асинхронном методе контроллера
            /// </summary>
            /// <param name="context">Контекст исключения</param>
			/// <returns>Задача</returns>
            //---------------------------------------------------------------------------------------------------------
            public override Task OnExceptionAsync(ExceptionContext context)
            {
                if (context is null)
                {
                    throw new ArgumentNullException(nameof(context));
                }

                OnException(context);
                return Task.CompletedTask;
            }

            //---------------------------------------------------------------------------------------------------------
            /// <summary>
            /// Обработка исключения в синхронном методе контроллера
            /// </summary>
            /// <param name="context">Контекст исключения</param>
            //---------------------------------------------------------------------------------------------------------
            public override void OnException(ExceptionContext context)
            {
                _logger.LogError(context.Exception, "ControllerActionName: {DisplayName}\nRequestPath: {Method} {Path}",
                    context.ActionDescriptor.DisplayName, context.HttpContext.Request.Method, context.HttpContext.Request.Path);

                // Преобразуем все исключения к типу Result
                ILotusResult result = context.Exception.GetResultDefault();
                context.Result = new ObjectResult(result)
                {
                    StatusCode = 500
                };
            }
            #endregion
        }
        //-------------------------------------------------------------------------------------------------------------
        /**@}*/
        //-------------------------------------------------------------------------------------------------------------
    }
}
//=====================================================================================================================