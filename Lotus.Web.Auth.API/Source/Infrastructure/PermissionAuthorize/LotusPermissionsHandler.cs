//=====================================================================================================================
// Проект: Web API модуля авторизации пользователя
// Раздел: Подсистема инфраструктуры
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusPermissionsHandler.cs
*		Обработчик для авторизации на основе разрешений.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using Microsoft.AspNetCore.Authorization;
//=====================================================================================================================
namespace Lotus.Auth
{
	namespace User
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup AuthUserApiInfrastructure
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Обработчик для авторизации на основе разрешений
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class PermissionsHandler : AuthorizationHandler<PermissionsRequirement>
		{
			#region ======================================= ДАННЫЕ ====================================================
			private readonly Func<CUserAuthorizeInfo?> mAuthorizeInfo;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="authorizeInfo">Делегат для получения информация об авторизации пользователя</param>
			//---------------------------------------------------------------------------------------------------------
			public PermissionsHandler(Func<CUserAuthorizeInfo?> authorizeInfo)
			{
				mAuthorizeInfo = authorizeInfo;
			}
			#endregion

			#region ======================================= ПЕРЕГРУЖЕННЫЕ МЕТОДЫ ======================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обработчик для авторизации на основе разрешений
			/// </summary>
			/// <param name="context">Контекст авторизации</param>
			/// <param name="requirement">Объект ограничения</param>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionsRequirement requirement)
			{
				var info = mAuthorizeInfo();

				if (info != null)
				{
					var isPermission = requirement.Permissions.Any(x => info.PermissionsSystemNamesAsText.Contains(x));
					if (isPermission)
					{
						context.Succeed(requirement);
					}
					else
					{
						context.Fail();
					}
				}
				else
				{
					context.Fail();
				}
				return Task.CompletedTask;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================