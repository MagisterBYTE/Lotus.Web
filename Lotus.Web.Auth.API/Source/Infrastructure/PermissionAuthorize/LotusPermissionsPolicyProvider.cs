//=====================================================================================================================
// Проект: Web API модуля авторизации пользователя
// Раздел: Подсистема инфраструктуры
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusPermissionsPolicyProvider.cs
*		Политика для авторизации на основе разрешений.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System.Diagnostics.CodeAnalysis;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Options;
//=====================================================================================================================
namespace Lotus.Auth
{
	namespace User
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup AuthUserApiInfrastructure
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Политика для авторизации на основе разрешений
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class PermissionsPolicyProvider : IAuthorizationPolicyProvider
		{
			#region ======================================= ДАННЫЕ ====================================================
			private readonly DefaultAuthorizationPolicyProvider mPolicyProvider;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="options">Опции авторизации</param>
			//---------------------------------------------------------------------------------------------------------
			public PermissionsPolicyProvider([NotNull] IOptions<AuthorizationOptions> options)
			{
				mPolicyProvider = new DefaultAuthorizationPolicyProvider(options);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение политки по умолчанию
			/// </summary>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			public Task<AuthorizationPolicy> GetDefaultPolicyAsync()
			{
				var builder = new AuthorizationPolicyBuilder();
				builder.RequireAuthenticatedUser();

				return Task.FromResult(builder.Build());
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение политки по умолчанию
			/// </summary>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			public Task<AuthorizationPolicy?> GetFallbackPolicyAsync()
			{
				return mPolicyProvider.GetFallbackPolicyAsync()!;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение политики
			/// </summary>
			/// <param name="policyName">Имя политики</param>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			public Task<AuthorizationPolicy?> GetPolicyAsync(String policyName)
			{
				var functions = policyName.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToArray();
				var builder = new AuthorizationPolicyBuilder();

				builder.RequireAuthenticatedUser();
				builder.AddRequirements(new PermissionsRequirement 
				{ 
					Permissions = new HashSet<String>(functions, StringComparer.OrdinalIgnoreCase) 
				});

				return Task.FromResult(builder.Build())!;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================